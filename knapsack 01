# 0/1 KNAPSACK

#include<bits/stdc++.h>

#define ll long long int
#define pb push_back
#define ff first
#define ss second
#define F(i, n) for (int i = 0; i < n; i++)
#define all(x)(x).begin(), (x).end()
#define show(A) for (auto i: A) cout << i << " "; cout << '\n';
#define show_(A, n) F(i, n) { show(A[i]) }

template<typename T,typename T1>T amax(T &a,T1 b){if(b>a)a=b;return a;}
template<typename T,typename T1>T amin(T &a,T1 b){if(b<a)a=b;return a;}
 

using namespace std;
using ld = long double;
using vi = vector < int > ;
using mi = map < int, int > ;
using pi = pair < int, int > ;

const int M = 1e9 + 7;
	
ll knapSack(ll W, ll wt[], ll val[], ll n)
{
    ll i, w;
    ll K[n + 1][W + 1];
 
    // Build table K[][] in bottom up manner
    for(i = 0; i <= n; i++)
    {
        for(w = 0; w <= W; w++)
        {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] +
                                K[i - 1][w - wt[i - 1]],
                                K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }
    return K[n][W];
}

void solve() {
   ll n,w;
  cin>>n>>w;
  ll wt[n+1],val[n+1];
  for(int i=0;i<n;i++)
  {
      cin>>wt[i]>>val[i];
   //   cout<<wt[i]<<" "<<val[i]<<"\n";
  }
  cout<<knapSack(w,wt,val,n)<<" ";
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
  solve();
	return 0;
}
